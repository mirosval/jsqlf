===
customer churn month
===

with mrr as (

    select * from {{ ref('customer_revenue_by_month') }}

),

-- row for month *after* last month of activity
joined as (

    select
        dateadd(month, 1, date_month)::date as date_month,
        customer_id,
        0::float as mrr,
        false as is_active,
        first_active_month,
        last_active_month,
        false as is_first_month,
        false as is_last_month

    from mrr

    where is_last_month

)

select * from joined

---

()

=== 
customer revenue by month
===

with subscription_periods as (

    select * from {{ ref('subscription_periods') }}

),

months as (

    select * from {{ ref('util_months') }}

),

-- determine when a given account had its first and last (or most recent) month
customers as (

    select
        customer_id,
        date_trunc('month', min(start_date)) as date_month_start,
        date_trunc('month', max(end_date)) as date_month_end

    from subscription_periods

    group by 1

),

-- create one record per month between a customer's first and last month
-- (example of a date spine)
customer_months as (

    select
        customers.customer_id,
        months.date_month

    from customers

    inner join months
        -- all months after start date
        on  months.date_month >= customers.date_month_start
        -- and before end date
        and months.date_month < customers.date_month_end

),

-- join the account-month spine to MRR base model, pulling through most recent dates
-- and plan info for month rows that have no invoices (i.e. churns)
joined as (

    select
        customer_months.date_month,
        customer_months.customer_id,
        coalesce(subscription_periods.monthly_amount, 0) as mrr

    from customer_months

    left join subscription_periods
        on customer_months.customer_id = subscription_periods.customer_id
        -- month is after a subscription start date
        and customer_months.date_month >= subscription_periods.start_date
        -- month is before a subscription end date (and handle null case)
        and (customer_months.date_month < subscription_periods.end_date
                or subscription_periods.end_date is null)

),

final as (

    select
        date_month,
        customer_id,
        mrr,

        mrr > 0 as is_active,

        -- calculate first and last months
        min(case when is_active then date_month end) over (
            partition by customer_id
        ) as first_active_month,

        max(case when is_active then date_month end) over (
            partition by customer_id
        ) as last_active_month,

        -- calculate if this record is the first or last month
        first_active_month = date_month as is_first_month,
        last_active_month = date_month as is_last_month

    from joined

)

select * from final

---

()

===
mrr
===

with unioned as (

    select * from {{ ref('customer_revenue_by_month') }}

    union all

    select * from {{ ref('customer_churn_month') }}

),

-- get prior month MRR and calculate MRR change
mrr_with_changes as (

    select
        *,

        coalesce(
            lag(is_active) over (partition by customer_id order by date_month),
            false
        ) as previous_month_is_active,

        coalesce(
            lag(mrr) over (partition by customer_id order by date_month),
            0
        ) as previous_month_mrr,

        mrr - previous_month_mrr as mrr_change

    from unioned

),

-- classify months as new, churn, reactivation, upgrade, downgrade (or null)
-- also add an ID column
final as (

    select
        {{  dbt_utils.surrogate_key('date_month', 'customer_id') }} as id,

        *,

        case
            when is_first_month
                then 'new'
            when not(is_active) and previous_month_is_active
                then 'churn'
            when is_active and not(previous_month_is_active)
                then 'reactivation'
            when mrr_change > 0 then 'upgrade'
            when mrr_change < 0 then 'downgrade'
        end as change_category,

        least(mrr, previous_month_mrr) as renewal_amount

    from mrr_with_changes

)

select * from final

---

()
